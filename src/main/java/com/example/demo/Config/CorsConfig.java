package com.example.demo.Config;

import java.util.Arrays;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

@Configuration
public class CorsConfig {

    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration configuration = new CorsConfiguration();

        /**
         * ‚ùå ‡§™‡§π‡§≤‡•á: ‡§§‡•Å‡§Æ‡§®‡•á `configuration.setAllowedOriginPatterns(Arrays.asList("*"))` 
         * ‡§î‡§∞ ‡§∏‡§æ‡§• ‡§Æ‡•á‡§Ç `setAllowCredentials(true)` ‡§ï‡§ø‡§Ø‡§æ ‡§•‡§æ‡•§
         * üëâ Problem: Spring `*` (wildcard) ‡§ï‡•ã credentials=true ‡§ï‡•á ‡§∏‡§æ‡§• allow ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡§§‡§æ‡•§
         * üëâ Result: Browser CORS error ‡§¶‡•á‡§§‡§æ ‡§π‡•à‡•§
         *
         * ‚úÖ ‡§Ö‡§¨: specific origins allow ‡§ï‡§ø‡§è ‡§π‡•à‡§Ç (local + GCP deploy + common hosting ‡§ú‡•à‡§∏‡•á vercel/netlify)
         */
        configuration.setAllowedOrigins(Arrays.asList(
            "http://localhost:3000",          // Local React dev
            "http://localhost:4200",          // Local Angular dev
            "http://34.61.254.251:3000",      // GCP frontend (React)
            "http://34.61.254.251:8080",      // GCP backend
            "https://34.61.254.251:3000",     // GCP frontend HTTPS
            "https://*.vercel.app",           // Vercel deployments
            "https://*.netlify.app"           // Netlify deployments
        ));

        // ‚úÖ Allowed methods same ‡§∞‡§ñ‡•á
        configuration.setAllowedMethods(Arrays.asList(
            "GET", "POST", "PUT", "DELETE", "OPTIONS", "PATCH", "HEAD"
        ));

        // ‚úÖ Allowed headers same ‡§∞‡§ñ‡•á
        configuration.setAllowedHeaders(Arrays.asList("*"));

        // ‚úÖ Credentials true ‡§∞‡§ñ‡§æ (cookies/auth headers bhejne ke liye)
        configuration.setAllowCredentials(true);

        // ‚úÖ Preflight cache (OPTIONS request) 1 hour ke liye
        configuration.setMaxAge(3600L);

        /**
         * ‚ùå ‡§™‡§π‡§≤‡•á: ‡§§‡•Å‡§Æ‡§®‡•á "*, http://127.0.0.1:* , http://34.61.254.251:*" ‡§ú‡•à‡§∏‡•Ä entries ‡§°‡§æ‡§≤‡•Ä ‡§•‡•Ä‡•§
         * üëâ Problem: ‡§Ø‡•á invalid ‡§π‡•à‡§Ç ‡§ï‡•ç‡§Ø‡•ã‡§Ç‡§ï‡§ø setAllowedOrigins ‡§Æ‡•á‡§Ç wildcard port/origin accept ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã‡§§‡§æ‡•§
         * ‚úÖ ‡§Ö‡§¨: ‡§∏‡§æ‡§´ ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ, ‡§∏‡§ø‡§∞‡•ç‡§´ valid origins allow ‡§ï‡§ø‡§è‡•§
         */

        // Apply configuration to all API paths
        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", configuration);

        return source;
    }
}
