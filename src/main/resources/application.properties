# ===============================================================================
# APPLICATION PROPERTIES - COMPLETE CONFIGURATION
# ===============================================================================

# ------------------------------
# Server Configuration
# ------------------------------
# Port on which your Spring Boot application will run

server.port=8010

# Optional: Server context path (if you want all APIs under a prefix)
# server.servlet.context-path=/api/v1

# ------------------------------
# PostgreSQL Database Configuration
# ------------------------------
# Database URL format: jdbc:postgresql://hostname:port/database_name
spring.datasource.url=jdbc:postgresql://localhost:5432/metavet
spring.datasource.username=postgres
spring.datasource.password=Faizan@123
spring.datasource.driver-class-name=org.postgresql.Driver

# Connection Pool Settings (for better performance)
spring.datasource.hikari.maximum-pool-size=20
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.connection-timeout=20000
spring.datasource.hikari.idle-timeout=300000
  
# ------------------------------
# Hibernate / JPA Configuration
# ------------------------------
# update = Creates/Updates tables automatically based on entities
# validate = Only validates the schema, doesn't change anything
# create = Drops and creates tables every time (USE CAREFULLY!)
# create-drop = Creates tables, drops when application shuts down
spring.jpa.hibernate.ddl-auto=update


# PostgreSQL specific dialect for better SQL optimization
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# SQL Formatting and Display Settings
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.show-sql=false

# Additional JPA Properties for better performance
spring.jpa.properties.hibernate.jdbc.batch_size=25
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.jdbc.batch_versioned_data=true

# ------------------------------
# Logging Configuration
# ------------------------------
# Application-wide logging level
logging.level.root=INFO

# Hide SQL logs in console (for cleaner output)
logging.level.org.hibernate.SQL=ERROR
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=ERROR

# Security debugging (set to INFO for production)
logging.level.org.springframework.security=DEBUG

# Your application specific logging
logging.level.com.example.demo=DEBUG

# Log file configuration (optional)
# logging.file.name=logs/metavet-app.log
# logging.file.max-size=10MB
# logging.file.max-history=30

# ------------------------------
# Security Configuration
# ------------------------------
# Disable Spring Security's default management security
management.security.enabled=false

# Jackson JSON configuration
spring.jackson.deserialization.fail-on-unknown-properties=false
spring.jackson.serialization.write-dates-as-timestamps=false
spring.jackson.time-zone=Asia/Kolkata

# ------------------------------
# JWT Security Configuration
# ------------------------------
# CRITICAL: These keys are for DEVELOPMENT ONLY
# For PRODUCTION: Use environment variables or external configuration service

# Access Token Settings
# Secret key for signing access tokens (Base64 encoded)
security.jwt.secret-key=bXlBY2Nlc3NTZWNyZXRLZXlGb3JKV1RUb2tlbkdlbmVyYXRpb25BbmRWYWxpZGF0aW9uMjAyNA==

# Refresh Token Settings  
# Different secret key for refresh tokens (Base64 encoded)
security.jwt.refresh-secret-key=bXlSZWZyZXNoU2VjcmV0S2V5Rm9yUmVmcmVzaFRva2VuR2VuZXJhdGlvbjIwMjQ=

# Token Expiration Times (in milliseconds)
# Access Token: 24 hours (86400000 ms = 24 * 60 * 60 * 1000)
security.jwt.expiration-time=86400000

# Refresh Token: 7 days (604800000 ms = 7 * 24 * 60 * 60 * 1000)
security.jwt.refresh.expiration-time=604800000

# Optional: Token issuer and audience
# security.jwt.issuer=metavet-app
# security.jwt.audience=metavet-users

# ------------------------------
# CORS Configuration
# ------------------------------
# Enable if you have a frontend application
# Frontend URLs that can access your API
spring.web.cors.allowed-origins=http://localhost:3000,http://localhost:4200,http://localhost:8080
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS,PATCH
spring.web.cors.allowed-headers=Authorization,Content-Type,X-Requested-With,Accept,Origin,Access-Control-Request-Method,Access-Control-Request-Headers
spring.web.cors.allow-credentials=true
spring.web.cors.max-age=3600

# ------------------------------
# Email Configuration (if you plan to send emails)
# ------------------------------
# Gmail SMTP Configuration (for OTP emails)
# spring.mail.host=smtp.gmail.com
# spring.mail.port=587
# spring.mail.username=your-email@gmail.com
# spring.mail.password=your-app-password
# spring.mail.properties.mail.smtp.auth=true
# spring.mail.properties.mail.smtp.starttls.enable=true

# ------------------------------
# File Upload Configuration
# ------------------------------
# Maximum file size for uploads (if you have file upload features)
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

# ------------------------------
# Application Specific Configuration
# ------------------------------
# OTP Configuration
app.otp.expiry-minutes=5
app.otp.length=6

# Pagination defaults
app.pagination.default-page-size=20
app.pagination.max-page-size=100

# API Rate Limiting (if implemented)
# app.rate-limit.requests-per-minute=100

# ------------------------------
# Production Security Headers
# ------------------------------
# Security headers for production
server.servlet.session.cookie.http-only=true
server.servlet.session.cookie.secure=true
server.servlet.session.cookie.same-site=strict

# ------------------------------
# Health Check Configuration
# ------------------------------
# Enable health check endpoints
management.endpoints.web.exposure.include=health,info,metrics
management.endpoint.health.show-details=when-authorized
 
# ------------------------------
# Environment Specific Overrides
# ------------------------------
# Note: Create separate files for different environments:
# - application-dev.properties
# - application-prod.properties  
# - application-test.properties

# For development environment
spring.profiles.active=dev